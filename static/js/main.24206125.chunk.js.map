{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","totalNodes","currentNodePosition","board","gameOver","successText","handleBtnClick","moverContainerLeftOffset","refs","moverContainer","offsetLeft","moverLeftOffset","mover","moverMiddle","clientWidth","moverLength","updateCurrentPosition","setState","resetBoard","currentPosition","updateBoard","value","boardData","key","className","renderBoard","boardItems","i","push","this","onClick","disabled","ref","style","backgroundColor","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAwHeA,G,iNApHbC,MAAQ,CACNC,WAAY,EACZC,oBAAqB,EACrBC,MAAO,GACPC,UAAU,EACVC,YAAa,I,EAOfC,eAAiB,WACf,IAAIC,EAA2B,EAAKC,KAAKC,eAAeC,WACpDC,EAAkB,EAAKH,KAAKI,MAAMF,WAClCG,EAAc,EAAKL,KAAKC,eAAeK,YAAc,EACrDC,EAAc,EAAKP,KAAKI,MAAME,YAI9BH,GAHOJ,EAA2BM,EAAe,IAAME,GAG5BJ,GAFnBJ,EAA2BM,EAAe,IAAME,EAG1D,EAAKC,yBAEL,EAAKC,SAAS,CAAEb,UAAU,IAC1B,EAAKc,e,EAITF,sBAAwB,WAAO,IAEzBG,EAD4B,EAAKnB,MAA7BE,oBAERiB,GAAmB,EACnB,EAAKF,SAAS,CAAEf,oBAAqBiB,IACrC,EAAKC,YAAYD,I,EAGnBC,YAAc,SAACC,GAAW,IAAD,EACO,EAAKrB,MAA3BG,EADe,EACfA,MACR,KAAIkB,EAFmB,EACRpB,YACf,CAGA,IAAIqB,EAAYnB,EAChBmB,EAAUD,EAAQ,GAAK,yBAAKE,IAAKF,EAAQ,GAAIA,EAAQ,GACrDC,EAAUD,EAAQ,GAAK,yBAAKE,IAAKF,EAAQ,GAAG,yBAAKG,UAAU,mBAC3D,EAAKP,SAAS,CAAEd,MAAOmB,EAAWlB,UAAU,M,EAG9Cc,WAAa,WACX,EAAKD,SAAS,CACZf,oBAAqB,EACrBC,MAAO,KACN,kBAAM,EAAKsB,kB,EAGhBA,YAAc,WAGZ,IAHmB,IACXxB,EAAe,EAAKD,MAApBC,WACJyB,EAAa,GACRC,EAAI,EAAGA,EAAI1B,EAAY0B,IAC9BD,EAAWE,KAAK,yBAAKL,IAAKI,GAAIA,EAAI,IAEpC,EAAKV,SAAS,CAAEd,MAAOuB,K,mFAnDvBG,KAAKJ,gB,+BAsDG,IAAD,EACsDI,KAAK7B,MAA1DG,EADD,EACCA,MAAOD,EADR,EACQA,oBAAqBD,EAD7B,EAC6BA,WAAYG,EADzC,EACyCA,SAChD,OACE,yBAAKoB,UAAU,OACb,gDACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,mBACZrB,GAEH,yBAAKqB,UAAU,SACb,6BACE,4BACEA,UAAU,cACVM,QAASD,KAAKvB,eACdyB,SAAU7B,IAAwBD,GAHpC,cAOA,4BACEuB,UAAU,aACVM,QAASD,KAAKX,YAFhB,UAMA,yBAAKc,IAAI,iBAAiBR,UAAU,mBAClC,yBAAKQ,IAAI,QAAQR,UAAU,WAE7B,yBAAKA,UAAU,QACb,0BAAMS,MAAO,CAAEC,gBAAiB,SAAhC,UAGJ,6BACGhC,IAAwBD,GAAc,wBAAIgC,MAAO,CAAEE,MAAO,UAApB,eACtC/B,GAAY,wBAAI6B,MAAO,CAAEE,MAAO,QAApB,mBAGjB,yBAAKX,UAAU,gBACb,4CACA,4BACE,yEAC4C,6BAD5C,6BAGA,oF,GA1GIY,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.24206125.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    totalNodes: 9,\r\n    currentNodePosition: 0,\r\n    board: [],\r\n    gameOver: false,\r\n    successText: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.renderBoard();\r\n  }\r\n\r\n  handleBtnClick = () => {\r\n    let moverContainerLeftOffset = this.refs.moverContainer.offsetLeft;\r\n    let moverLeftOffset = this.refs.mover.offsetLeft;\r\n    let moverMiddle = this.refs.moverContainer.clientWidth / 2;\r\n    let moverLength = this.refs.mover.clientWidth;\r\n    let left = moverContainerLeftOffset + moverMiddle - (1.5 * moverLength);\r\n    let right = moverContainerLeftOffset + moverMiddle + (1.5 * moverLength);\r\n\r\n    if (moverLeftOffset >= left && moverLeftOffset <= right) {\r\n      this.updateCurrentPosition();\r\n    } else {\r\n      this.setState({ gameOver: true });\r\n      this.resetBoard();\r\n    }\r\n  }\r\n\r\n  updateCurrentPosition = () => {\r\n    const { currentNodePosition } = this.state;\r\n    let currentPosition = currentNodePosition;\r\n    currentPosition += 1;\r\n    this.setState({ currentNodePosition: currentPosition });\r\n    this.updateBoard(currentPosition);\r\n  }\r\n\r\n  updateBoard = (value) => {\r\n    const { board, totalNodes } = this.state;\r\n    if (value > totalNodes) {\r\n      return;\r\n    }\r\n    let boardData = board;\r\n    boardData[value - 2] = <div key={value - 2}>{value - 1}</div>\r\n    boardData[value - 1] = <div key={value - 1}><div className='selected-node'></div></div>\r\n    this.setState({ board: boardData, gameOver: false });\r\n  }\r\n\r\n  resetBoard = () => {\r\n    this.setState({\r\n      currentNodePosition: 0,\r\n      board: []\r\n    }, () => this.renderBoard());\r\n  }\r\n\r\n  renderBoard = () => {\r\n    const { totalNodes } = this.state;\r\n    let boardItems = [];\r\n    for (let i = 0; i < totalNodes; i++) {\r\n      boardItems.push(<div key={i}>{i + 1}</div>)\r\n    }\r\n    this.setState({ board: boardItems });\r\n  }\r\n\r\n  render() {\r\n    const { board, currentNodePosition, totalNodes, gameOver } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>React Board game</h1>\r\n        <div className=\"main-container\">\r\n          <div className=\"board-container\">\r\n            {board}\r\n          </div>\r\n          <div className=\"panel\">\r\n            <div>\r\n              <button\r\n                className=\"btn primary\"\r\n                onClick={this.handleBtnClick}\r\n                disabled={currentNodePosition === totalNodes}\r\n              >\r\n                Click Here\r\n            </button>\r\n              <button\r\n                className=\"btn danger\"\r\n                onClick={this.resetBoard}\r\n              >\r\n                Replay\r\n            </button>\r\n              <div ref=\"moverContainer\" className=\"mover-container\">\r\n                <div ref=\"mover\" className=\"mover\"></div>\r\n              </div>\r\n              <div className=\"zone\">\r\n                <span style={{ backgroundColor: '#333' }}>ZONE</span>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              {currentNodePosition === totalNodes && <h1 style={{ color: 'green' }}>You won !!!</h1>}\r\n              {gameOver && <h1 style={{ color: 'red' }}>Game over !!!</h1>}\r\n            </div>\r\n          </div>\r\n          <div className=\"instructions\">\r\n            <h3>Instructions</h3>\r\n            <ol>\r\n              <li>\r\n                Press 'Click here' Button when the moving <br/>node is inside the 'Zone'\r\n              </li>\r\n              <li>\r\n                If you can reach to box 9, you are a winner!\r\n              </li>\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}