{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","totalNodes","currentNodePosition","board","gameOver","successText","handleBtnClick","moverContainerLeftOffset","refs","moverContainer","offsetLeft","moverLeftOffset","mover","moverMiddle","clientWidth","moverLength","updateCurrentPosition","setState","resetBoard","currentPosition","updateBoard","value","boardData","key","className","renderBoard","boardItems","i","push","this","onClick","disabled","ref","style","backgroundColor","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAwHeA,G,iNApHbC,MAAQ,CACNC,WAAY,EACZC,oBAAqB,EACrBC,MAAO,GACPC,UAAU,EACVC,YAAa,I,EAOfC,eAAiB,WACf,IAAIC,EAA2B,EAAKC,KAAKC,eAAeC,WACpDC,EAAkB,EAAKH,KAAKI,MAAMF,WAClCG,EAAc,EAAKL,KAAKC,eAAeK,YAAc,EACrDC,EAAc,EAAKP,KAAKI,MAAME,YAI9BH,GAHOJ,EAA2BM,EAAe,IAAME,GAG5BJ,GAFnBJ,EAA2BM,EAAe,IAAME,EAG1D,EAAKC,yBAEL,EAAKC,SAAS,CAAEb,UAAU,IAC1B,EAAKc,e,EAITF,sBAAwB,WAAO,IAEzBG,EAD4B,EAAKnB,MAA7BE,oBAERiB,GAAmB,EACnB,EAAKF,SAAS,CAAEf,oBAAqBiB,IACrC,EAAKC,YAAYD,I,EAGnBC,YAAc,SAACC,GAAW,IAAD,EACO,EAAKrB,MAA3BG,EADe,EACfA,MACR,KAAIkB,EAFmB,EACRpB,YACf,CAGA,IAAIqB,EAAYnB,EAChBmB,EAAUD,EAAQ,GAAK,yBAAKE,IAAKF,EAAQ,GAAIA,EAAQ,GACrDC,EAAUD,EAAQ,GAAK,yBAAKE,IAAKF,EAAQ,GAAG,yBAAKG,UAAU,mBAC3D,EAAKP,SAAS,CAAEd,MAAOmB,EAAWlB,UAAU,M,EAG9Cc,WAAa,WACX,EAAKD,SAAS,CACZf,oBAAqB,EACrBC,MAAO,KACN,kBAAM,EAAKsB,kB,EAGhBA,YAAc,WAGZ,IAHmB,IACXxB,EAAe,EAAKD,MAApBC,WACJyB,EAAa,GACRC,EAAI,EAAGA,EAAI1B,EAAY0B,IAC9BD,EAAWE,KAAK,yBAAKL,IAAKI,GAAIA,EAAI,IAEpC,EAAKV,SAAS,CAAEd,MAAOuB,K,mFAnDvBG,KAAKJ,gB,+BAsDG,IAAD,EACsDI,KAAK7B,MAA1DG,EADD,EACCA,MAAOD,EADR,EACQA,oBAAqBD,EAD7B,EAC6BA,WAAYG,EADzC,EACyCA,SAChD,OACE,yBAAKoB,UAAU,OACb,gDACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,mBACZrB,GAEH,yBAAKqB,UAAU,SACb,6BACE,4BACEA,UAAU,cACVM,QAASD,KAAKvB,eACdyB,SAAU7B,IAAwBD,GAHpC,cAOA,4BACEuB,UAAU,aACVM,QAASD,KAAKX,YAFhB,UAMA,yBAAKc,IAAI,iBAAiBR,UAAU,mBAClC,yBAAKQ,IAAI,QAAQR,UAAU,WAE7B,yBAAKA,UAAU,QACb,0BAAMS,MAAO,CAAEC,gBAAiB,SAAhC,UAGJ,6BACGhC,IAAwBD,GAAc,wBAAIgC,MAAO,CAAEE,MAAO,UAApB,eACtC/B,GAAY,wBAAI6B,MAAO,CAAEE,MAAO,QAApB,mBAGjB,yBAAKX,UAAU,gBACb,4CACA,4BACE,yEAC4C,6BAD5C,6BAGA,oF,GA1GIY,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cedf8645.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    totalNodes: 9,\n    currentNodePosition: 0,\n    board: [],\n    gameOver: false,\n    successText: ''\n  };\n\n  componentDidMount() {\n    this.renderBoard();\n  }\n\n  handleBtnClick = () => {\n    let moverContainerLeftOffset = this.refs.moverContainer.offsetLeft;\n    let moverLeftOffset = this.refs.mover.offsetLeft;\n    let moverMiddle = this.refs.moverContainer.clientWidth / 2;\n    let moverLength = this.refs.mover.clientWidth;\n    let left = moverContainerLeftOffset + moverMiddle - (1.5 * moverLength);\n    let right = moverContainerLeftOffset + moverMiddle + (1.5 * moverLength);\n\n    if (moverLeftOffset >= left && moverLeftOffset <= right) {\n      this.updateCurrentPosition();\n    } else {\n      this.setState({ gameOver: true });\n      this.resetBoard();\n    }\n  }\n\n  updateCurrentPosition = () => {\n    const { currentNodePosition } = this.state;\n    let currentPosition = currentNodePosition;\n    currentPosition += 1;\n    this.setState({ currentNodePosition: currentPosition });\n    this.updateBoard(currentPosition);\n  }\n\n  updateBoard = (value) => {\n    const { board, totalNodes } = this.state;\n    if (value > totalNodes) {\n      return;\n    }\n    let boardData = board;\n    boardData[value - 2] = <div key={value - 2}>{value - 1}</div>\n    boardData[value - 1] = <div key={value - 1}><div className='selected-node'></div></div>\n    this.setState({ board: boardData, gameOver: false });\n  }\n\n  resetBoard = () => {\n    this.setState({\n      currentNodePosition: 0,\n      board: []\n    }, () => this.renderBoard());\n  }\n\n  renderBoard = () => {\n    const { totalNodes } = this.state;\n    let boardItems = [];\n    for (let i = 0; i < totalNodes; i++) {\n      boardItems.push(<div key={i}>{i + 1}</div>)\n    }\n    this.setState({ board: boardItems });\n  }\n\n  render() {\n    const { board, currentNodePosition, totalNodes, gameOver } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>React Board game</h1>\n        <div className=\"main-container\">\n          <div className=\"board-container\">\n            {board}\n          </div>\n          <div className=\"panel\">\n            <div>\n              <button\n                className=\"btn primary\"\n                onClick={this.handleBtnClick}\n                disabled={currentNodePosition === totalNodes}\n              >\n                Click Here\n            </button>\n              <button\n                className=\"btn danger\"\n                onClick={this.resetBoard}\n              >\n                Replay\n            </button>\n              <div ref=\"moverContainer\" className=\"mover-container\">\n                <div ref=\"mover\" className=\"mover\"></div>\n              </div>\n              <div className=\"zone\">\n                <span style={{ backgroundColor: '#333' }}>ZONE</span>\n              </div>\n            </div>\n            <div>\n              {currentNodePosition === totalNodes && <h1 style={{ color: 'green' }}>You won !!!</h1>}\n              {gameOver && <h1 style={{ color: 'red' }}>Game over !!!</h1>}\n            </div>\n          </div>\n          <div className=\"instructions\">\n            <h3>Instructions</h3>\n            <ol>\n              <li>\n                Press 'Click here' Button when the moving <br/>node is inside the 'Zone'\n              </li>\n              <li>\n                If you can reach to box 9, you are a winner!\n              </li>\n            </ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}